<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_controlpanel.Text" xml:space="preserve">
    <value>Control Panel</value>
  </data>
  <data name="AddAllColumns.Text" xml:space="preserve">
    <value>Add All Columns</value>
  </data>
  <data name="AddSelectedColumns.Text" xml:space="preserve">
    <value>Add Selected Columns</value>
  </data>
  <data name="AutoGenerateForm.Text" xml:space="preserve">
    <value>Auto-Generate Form for this Table</value>
  </data>
  <data name="AutoGenerateTemplate.Text" xml:space="preserve">
    <value>Auto-Generate Template for this Table</value>
  </data>
  <data name="Back.Text" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="BasicDNNStyling.Text" xml:space="preserve">
    <value>Basic DNN Styling</value>
  </data>
  <data name="BasicList.Text" xml:space="preserve">
    <value>Basic List</value>
  </data>
  <data name="BulletList.Text" xml:space="preserve">
    <value>BulletList</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Close.Text" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ColumnName.Text" xml:space="preserve">
    <value>Column Name</value>
  </data>
  <data name="ColumnsInForm.Text" xml:space="preserve">
    <value>Columns In Form</value>
  </data>
  <data name="ColumnsInTable.Text" xml:space="preserve">
    <value>Columns In Table</value>
  </data>
  <data name="ConfirmDelete.Text" xml:space="preserve">
    <value>Are you sure you want to delete this?</value>
  </data>
  <data name="ConfirmDeleteTitle.Text" xml:space="preserve">
    <value>Confirm Delete</value>
  </data>
  <data name="Copy.Text" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="CopyForm.Text" xml:space="preserve">
    <value>Copy Form</value>
  </data>
  <data name="CopyTemplate.Text" xml:space="preserve">
    <value>Copy Template</value>
  </data>
  <data name="CreateForm.Text" xml:space="preserve">
    <value>Create Form</value>
  </data>
  <data name="CreateTable.Text" xml:space="preserve">
    <value>Create Table</value>
  </data>
  <data name="DatabaseTools.Text" xml:space="preserve">
    <value>Database Tools</value>
  </data>
  <data name="DatabaseToolsDescription.Text" xml:space="preserve">
    <value>The table designer is a great way to create basic tables in your DNN database or to quickly prototype a more advanced solution. With the table designer, you can create the table and then use the form and template builders to  automatically generate a basic form and template, giving you a complete, working solution with just a few mouse clicks. It is not designed as a replacement for Management Studio or other dedicated tools.</value>
  </data>
  <data name="DataType.Text" xml:space="preserve">
    <value>Data Type</value>
  </data>
  <data name="DefaultValue.Text" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteForm.Text" xml:space="preserve">
    <value>Delete Form</value>
  </data>
  <data name="DeleteTemplate.Text" xml:space="preserve">
    <value>Delete Template</value>
  </data>
  <data name="DragToChangeOrder.Text" xml:space="preserve">
    <value>Drag to change order</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditForm.Text" xml:space="preserve">
    <value>Edit Form</value>
  </data>
  <data name="EditTemplate.Text" xml:space="preserve">
    <value>Edit Template</value>
  </data>
  <data name="Error.Text" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Exit.Text" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="FormAndDataSourceInformation.Text" xml:space="preserve">
    <value>Form and Datasource Information</value>
  </data>
  <data name="FormBuilder.Text" xml:space="preserve">
    <value>Form Builder</value>
  </data>
  <data name="FormBuilderNote.Text" xml:space="preserve">
    <value>*Note: Only columns with recognized data types are returned</value>
  </data>
  <data name="FormEditorNote.Text" xml:space="preserve">
    <value>NOTE: Not all styles from your site are applied to the preview. Therefore, it may appear different 
                when added to a page.</value>
  </data>
  <data name="FormLayoutAndStyling.Text" xml:space="preserve">
    <value>Form Layout and Styling</value>
  </data>
  <data name="FormManager.Text" xml:space="preserve">
    <value>Form Manager</value>
  </data>
  <data name="FormManagerGrid.Text" xml:space="preserve">
    <value>Form Manager Grid</value>
  </data>
  <data name="FormName.Text" xml:space="preserve">
    <value>Form Name:</value>
  </data>
  <data name="FormNameColumn.Text" xml:space="preserve">
    <value>Form Name</value>
  </data>
  <data name="GenerateFormFromTable.Text" xml:space="preserve">
    <value>Generate Form from Table</value>
  </data>
  <data name="GenerateTemplateFromTable.Text" xml:space="preserve">
    <value>Generate Template from Table</value>
  </data>
  <data name="Grid.Text" xml:space="preserve">
    <value>Grid</value>
  </data>
  <data name="Help.Text" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HelpTopics.Text" xml:space="preserve">
    <value>Help Topics:</value>
  </data>
  <data name="Identity.Text" xml:space="preserve">
    <value>Identity</value>
  </data>
  <data name="InvalidFormName.Text" xml:space="preserve">
    <value>Invalid Form Name</value>
  </data>
  <data name="InvalidTemplateName.Text" xml:space="preserve">
    <value>Invalid Template Name</value>
  </data>
  <data name="ItemNameValidation.Text" xml:space="preserve">
    <value>Names can only contain letters, numbers, underscores (_), and dashes (-)</value>
  </data>
  <data name="LabelColumnWidth.Text" xml:space="preserve">
    <value>Label Column Width (px):</value>
  </data>
  <data name="LabelsAboveControls.Text" xml:space="preserve">
    <value>Labels Above Controls</value>
  </data>
  <data name="LeftAlignedLabels.Text" xml:space="preserve">
    <value>Left-Aligned Labels</value>
  </data>
  <data name="Loading.Text" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="LoadingPreview.Text" xml:space="preserve">
    <value>Loading Preview</value>
  </data>
  <data name="ManageForms.Text" xml:space="preserve">
    <value>Manage Forms</value>
  </data>
  <data name="ManageTemplates.Text" xml:space="preserve">
    <value>Manage Templates</value>
  </data>
  <data name="NewColumn.Text" xml:space="preserve">
    <value>New Column</value>
  </data>
  <data name="NewForm.Text" xml:space="preserve">
    <value>New Form</value>
  </data>
  <data name="NewTemplate.Text" xml:space="preserve">
    <value>New Template</value>
  </data>
  <data name="Next.Text" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NoColumnsInForm.Text" xml:space="preserve">
    <value>No columns have been selected. To include a column in your form, double-click that column's name in the list box to the left. Once you have added a few columns to your form, you can change their order in the form by dragging and dropping them.</value>
  </data>
  <data name="NoControlsAddedToForm.Text" xml:space="preserve">
    <value>No controls have been added to the form</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Nulls.Text" xml:space="preserve">
    <value>Nulls</value>
  </data>
  <data name="NumberedList.Text" xml:space="preserve">
    <value>Numbered List</value>
  </data>
  <data name="OneColumnTable.Text" xml:space="preserve">
    <value>One Column Table</value>
  </data>
  <data name="OnlyNumbersAreAllowed.Text" xml:space="preserve">
    <value>Only numbers are allowed</value>
  </data>
  <data name="Options.Text" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Paragraphs.Text" xml:space="preserve">
    <value>Paragraphs</value>
  </data>
  <data name="Preview.Text" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="PreviewForm.Text" xml:space="preserve">
    <value>Preview Form</value>
  </data>
  <data name="PreviewTemplate.Text" xml:space="preserve">
    <value>Preview Template</value>
  </data>
  <data name="QuickFormCreator.Text" xml:space="preserve">
    <value>Quick Form Creator</value>
  </data>
  <data name="QuickFormCreatorDescription.Text" xml:space="preserve">
    <value>Quickly create a basic form, ready for editing. Check the box to base that form on a table in your DNN database. For even more options, try the Form Builder.</value>
  </data>
  <data name="QuickFormCreatorHelp.Text" xml:space="preserve">
    <value>Generates a basic blank form or a form based on a table in your DNN database. It then opens the Form Editor enabling you to make changes to the form before creating it.</value>
  </data>
  <data name="QuickFormCreatorPanel.Text" xml:space="preserve">
    <value>Quick Form Creator Panel:</value>
  </data>
  <data name="QuickTemplateCreator.Text" xml:space="preserve">
    <value>Quick Template Creator</value>
  </data>
  <data name="QuickTemplateCreatorDescription.Text" xml:space="preserve">
    <value>Quickly create a basic template, ready for editing. Check the box to base that form on a table in your DNN database.</value>
  </data>
  <data name="QuickTemplateCreatorHelp.Text" xml:space="preserve">
    <value>Generates a basic blank template or a template based on a table in your DNN database. It then opens the Template Editor enabling you to make changes to the template before creating it.</value>
  </data>
  <data name="QuickTemplateCreatorPanel.Text" xml:space="preserve">
    <value>Quick Template Creator Panel:</value>
  </data>
  <data name="ReloadTableList.Text" xml:space="preserve">
    <value>Reload Table List</value>
  </data>
  <data name="RemoveFromForm.Text" xml:space="preserve">
    <value>Remove from form</value>
  </data>
  <data name="Rename.Text" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="RenameForm.Text" xml:space="preserve">
    <value>Rename Form</value>
  </data>
  <data name="RenameTemplate.Text" xml:space="preserve">
    <value>Rename Template</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="Return.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="RightAlignedLabels.Text" xml:space="preserve">
    <value>Right-Aligned Labels</value>
  </data>
  <data name="Save.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SelectATheme.Text" xml:space="preserve">
    <value>Select A Theme:</value>
  </data>
  <data name="SelectTable.Text" xml:space="preserve">
    <value>Select Table:</value>
  </data>
  <data name="SelectUniqueId.Text" xml:space="preserve">
    <value>Select Unique ID Field:</value>
  </data>
  <data name="Size.Text" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="Success.Text" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="TableDesigner.Text" xml:space="preserve">
    <value>Table Designer</value>
  </data>
  <data name="TableName.Text" xml:space="preserve">
    <value>Table Name:</value>
  </data>
  <data name="TemplateEditorNote.Text" xml:space="preserve">
    <value>NOTE: Not all styles from your site are applied to the preview. Therefore, it may appear different</value>
  </data>
  <data name="TemplateManager.Text" xml:space="preserve">
    <value>Template Manager</value>
  </data>
  <data name="TemplateManagerGrid.Text" xml:space="preserve">
    <value>Template Manager Grid:</value>
  </data>
  <data name="TemplateName.Text" xml:space="preserve">
    <value>Template Name:</value>
  </data>
  <data name="TemplateNameColumn.Text" xml:space="preserve">
    <value>Template Name</value>
  </data>
  <data name="TemplateType.Text" xml:space="preserve">
    <value>Template Type</value>
  </data>
  <data name="Update.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="UseRoundedCorners.Text" xml:space="preserve">
    <value>Use Rounded Corners on Supported Browsers</value>
  </data>
  <data name="AddForm.Text" xml:space="preserve">
    <value>Add Form</value>
  </data>
  <data name="DataList.Text" xml:space="preserve">
    <value>Data List</value>
  </data>
  <data name="ImageSlideshow.Text" xml:space="preserve">
    <value>Image Slideshow</value>
  </data>
  <data name="BaseImagePath.Text" xml:space="preserve">
    <value>Base Image Path</value>
  </data>
  <data name="FrameDuration.Text" xml:space="preserve">
    <value>Frame Duration</value>
  </data>
  <data name="Height.Text" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="ImageField.Text" xml:space="preserve">
    <value>Select Image Field:</value>
  </data>
  <data name="Width.Text" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="ConnectionString.Text" xml:space="preserve">
    <value>Connection String</value>
  </data>
  <data name="DotNetNukeDatabase.Text" xml:space="preserve">
    <value>DotNetNuke Database</value>
  </data>
  <data name="ExternalSQLServer.Text" xml:space="preserve">
    <value>External SQL Server Database</value>
  </data>
  <data name="SelectDataSource.Text" xml:space="preserve">
    <value>Select Data Source</value>
  </data>
  <data name="LoadTables.Text" xml:space="preserve">
    <value>Load Tables</value>
  </data>
  <data name="Custom.Text" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="FeedManager.Text" xml:space="preserve">
    <value>Feed Manager</value>
  </data>
  <data name="FeedName.Text" xml:space="preserve">
    <value>Feed Name</value>
  </data>
  <data name="FeedNameColumn.Text" xml:space="preserve">
    <value>Feed Name</value>
  </data>
  <data name="FeedType.Text" xml:space="preserve">
    <value>Feed Type</value>
  </data>
  <data name="GenerateFeedFromTable.Text" xml:space="preserve">
    <value>Generate Feed from Table</value>
  </data>
  <data name="InvalidFeedName.Text" xml:space="preserve">
    <value>Invalid Feed Name</value>
  </data>
  <data name="NewFeed.Text" xml:space="preserve">
    <value>New Feed</value>
  </data>
  <data name="CommaSeparatedValues.Text" xml:space="preserve">
    <value>Comma-Separated Values (CSV)</value>
  </data>
  <data name="Filename.Text" xml:space="preserve">
    <value>Filename</value>
  </data>
  <data name="SelectColumns.Text" xml:space="preserve">
    <value>Select Columns</value>
  </data>
  <data name="DetailViewOnly.Text" xml:space="preserve">
    <value>Detail View Only</value>
  </data>
</root>