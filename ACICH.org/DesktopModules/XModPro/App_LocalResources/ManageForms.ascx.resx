<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ClearFilter.Text" xml:space="preserve">
    <value>Clear Filter</value>
  </data>
  <data name="ConfirmDelete.Text" xml:space="preserve">
    <value>Are you sure you want to delete this form?</value>
  </data>
  <data name="Content.Text" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="ControlTitle_forms.Text" xml:space="preserve">
    <value>Manage Forms</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditCommands.Text" xml:space="preserve">
    <value>Edit Commands</value>
  </data>
  <data name="ERR_InvalidName.Text" xml:space="preserve">
    <value>Invalid Name: Only letters, numbers, hyphens (-), and underscores (_) are allowed</value>
  </data>
  <data name="ERR_MissingContent.Text" xml:space="preserve">
    <value>You must supply some text for the form's Content</value>
  </data>
  <data name="ERR_MissingName.Text" xml:space="preserve">
    <value>You must supply a name Form Name</value>
  </data>
  <data name="ERR_NonUniqueName.Text" xml:space="preserve">
    <value>The name you have chosen for the form conflicts with the name of an existing form. Please use a unique Form Name.</value>
  </data>
  <data name="FilterDescription.Text" xml:space="preserve">
    <value>(Use the textbox below to filter results)</value>
  </data>
  <data name="FormName.Text" xml:space="preserve">
    <value>Form Name</value>
  </data>
  <data name="Help.Text" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>Please refer to the help file which accompanied this application for comprehensive help. Specific help for tags and tokens can be accessed by selecting the tag or token from the 'Online Help' drop-down list and pressing the Help button. For additional support please visit our forums at http://dnndev.com</value>
  </data>
  <data name="NewForm.Text" xml:space="preserve">
    <value>New Form</value>
  </data>
  <data name="OnlineHelp.Text" xml:space="preserve">
    <value>Online Help:</value>
  </data>
  <data name="PopupHelpTitle.Text" xml:space="preserve">
    <value>XMod Pro Help</value>
  </data>
  <data name="Update.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="ManageTemplates.Text" xml:space="preserve">
    <value>Manage Templates</value>
  </data>
  <data name="SwitchTo.Text" xml:space="preserve">
    <value>Switch To:</value>
  </data>
  <data name="PageSize.Text" xml:space="preserve">
    <value>Page Size:</value>
  </data>
</root>